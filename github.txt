<!DOCTYPE html>
<html lang="pl">
<head>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>BudÅ¼et Domowy</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #1e1e1e;
      color: #d4af37;
      padding: 2rem;
      max-width: 800px;
      margin: auto;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    section {
      background: #2c2c2c;
      padding: 1rem 2rem;
      margin-bottom: 2rem;
      border-radius: 12px;
      box-shadow: 0 4px 8px rgba(212, 175, 55, 0.3);
      border: 1px solid #d4af37;
    }
    h1, h2 {
      text-align: center;
      color: #ffd966;
      margin-bottom: 0.5rem;
    }
    label {
      display: block;
      margin-top: 1rem;
      font-weight: 600;
      color: #ffd966;
    }
    input[type="number"], input[type="text"], select {
      box-sizing: border-box;
      padding: 0.5rem 0.8rem;
      margin-top: 0.3rem;
      border-radius: 6px;
      border: 1px solid #d4af37;
      background: #3b3b3b;
      color: #ffd966;
      font-size: 1rem;
      transition: border-color 0.3s ease;
      display: inline-block;
      vertical-align: middle;
    }
    input[type="number"], input[type="text"] {
      width: 60%;
      max-width: 300px;
    }
    select {
      width: auto;
      min-width: 160px;
    }
    input[type="number"]:focus, input[type="text"]:focus, select:focus {
      outline: none;
      border-color: #ffd966;
      background: #444;
      color: #fff;
    }
    button {
      margin-top: 0.5rem;
      padding: 0.4rem 1rem;
      background: #d4af37;
      color: #1e1e1e;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 700;
      font-size: 0.9rem;
      transition: background-color 0.3s ease;
      vertical-align: middle;
    }
    button:hover {
      background: #ffd966;
      color: #1a1a1a;
    }
    .result {
      font-size: 1.1rem;
      font-weight: bold;
      white-space: pre-wrap;
      color: #fff3b0;
      background: #3b3b3b;
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid #d4af37;
      margin-top: 1rem;
    }
    ul {
      padding-left: 1.5rem;
      color: #f0d77a;
      max-height: 150px;
      overflow-y: auto;
      margin-top: 0.5rem;
      border: 1px solid #d4af37;
      border-radius: 8px;
      background: #3b3b3b;
    }
    .flex-row {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      margin-top: 0.6rem;
    }
    .flex-row input[type="text"] {
      width: 40%;
    }
    .flex-row input[type="number"] {
      width: 30%;
    }
    .expense-button {
      background-color: #b22222;
      color: white;
      padding: 0.4rem 0.7rem;
      border-radius: 6px;
      font-weight: 700;
      font-size: 0.8rem;
      min-width: 70px;
    }
    /* ResponsywnoÅ›Ä‡ */
    @media (max-width: 480px) {
      body {
        padding: 1rem;
      }
      section {
        padding: 1rem;
        margin-bottom: 1.5rem;
      }
      button {
        max-width: 100%;
      }
      input[type="number"], input[type="text"] {
        font-size: 1.1rem;
        width: 100% !important;
      }
      label {
        font-size: 1rem;
      }
      h1 {
        font-size: 1.8rem;
      }
      h2 {
        font-size: 1.4rem;
      }
      .result {
        font-size: 1rem;
      }
      .flex-row {
        flex-direction: column;
        align-items: flex-start;
      }
      .flex-row input[type="text"], .flex-row input[type="number"], .flex-row button {
        width: 100% !important;
        margin-top: 0.3rem;
      }
    }
  </style>
</head>
<body>
  <h1>BudÅ¼et Domowy</h1>

  <section id="incomeSection">
    <h2>WpÅ‚ywy</h2>
    <div id="incomeList"></div>
    <button onclick="addIncome()">âž• Dodaj wpÅ‚yw</button>
  </section>

  <section id="fixedExpensesSection">
    <h2>Wydatki staÅ‚e</h2>
    <div id="fixedExpensesList"></div>
    <button onclick="addFixedExpense()">âž• Dodaj wydatek staÅ‚y</button>
  </section>

  <section id="subscriptionsSection">
    <h2>Subskrypcje</h2>
    <div id="subscriptionsList"></div>
    <button onclick="addSubscription()">âž• Dodaj subskrypcjÄ™</button>
  </section>

  <section>
    <h2>Wydatki ad hoc, uzupeÅ‚niane po kaÅ¼dym zakupie</h2>
    <label for="expenseCategory">Kategoria:</label>
    <select id="expenseCategory" onchange="categoryChanged()">
      <option value="">-- Wybierz kategoriÄ™ --</option>
      <option value="spozywka">SpoÅ¼ywka</option>
      <option value="restauracje">Restauracje</option>
      <option value="paliwo">Paliwo</option>
      <option value="wakacje">Wakacje</option>
      <option value="inne">Inne</option>
    </select>

    <label id="subcategoryLabel" style="display:none; margin-top: 1rem;" for="expenseSubcategory">Podkategoria:</label>
    <select id="expenseSubcategory" style="display:none;">
      <option value="">-- Wybierz podkategoriÄ™ --</option>
    </select>

    <label for="expenseDesc">Opis wydatku (opcjonalny):</label>
    <input type="text" id="expenseDesc" />
    <label for="expenseAmount">Kwota wydatku:</label>
    <input type="number" id="expenseAmount" />
    <button onclick="addExpense()">âž• Dodaj wydatek</button>
  </section>

  <section>
    <h2>Podsumowanie</h2>
    <p id="summaryText" class="result"></p>
    <h3>Wydatki ad hoc:</h3>
    <ul id="expenseList"></ul>
    <button onclick="resetBin()">ðŸ§¹ Resetuj dane (ostrzeÅ¼enie!)</button>
  </section>

  <div style="text-align:center; margin-top:2rem;">
    <button onclick="saveData()">ðŸ’¾ Zapisz dane</button>
  </div>

  <script>
    const binId = "688a2a2c7b4b8670d8a9e071";
    const masterKey = "$2a$10$PrRx.RBOnJmEFTqQQLH/Tu8TXFwoNEI.j/XEFF19EYFYELKzSX9BC";
    const apiUrl = `https://api.jsonbin.io/v3/b/${binId}`;

    // PoczÄ…tkowe dane
    let incomes = [
      { name: "Pensja", amount: 1500 },
      { name: "800+", amount: 800 },
    ];
    let fixedExpenses = [
      { name: "Internet", amount: 75 },
      { name: "PrÄ…d", amount: 350 },
    ];
    let subscriptions = [
      { name: "Netflix", amount: 80 },
      { name: "Apple", amount: 30 },
    ];

    let adHocExpenses = [];

    // Kategorie i podkategorie
    const options = {
      spozywka: ['Biedronka', 'Lidl', 'Å»abka', 'Carrefour', 'Auchan'],
      restauracje: ['McDonald\'s', 'KFC', 'Lokalna knajpa', 'DowÃ³z'],
      paliwo: ['Orlen', 'BP', 'Shell'],
      wakacje: ['Booking', 'Airbnb', 'LOT', 'Inne'],
      inne: ['Brak podkategorii']
    };

    // Funkcje dodawania nowych wpisÃ³w do list

    function createInputRow(container, dataArray, index, type) {
      // Tworzy wiersz inputÃ³w i przycisk usuwania
      const div = document.createElement("div");
      div.className = "flex-row";

      const nameInput = document.createElement("input");
      nameInput.type = "text";
      nameInput.value = dataArray[index].name;
      nameInput.placeholder = "Nazwa";
      nameInput.oninput = () => {
        dataArray[index].name = nameInput.value;
      };

      const amountInput = document.createElement("input");
      amountInput.type = "number";
      amountInput.min = "0";
      amountInput.step = "0.01";
      amountInput.value = dataArray[index].amount;
      amountInput.placeholder = "Kwota";
      amountInput.oninput = () => {
        let val = parseFloat(amountInput.value);
        if (isNaN(val) || val < 0) val = 0;
        dataArray[index].amount = val;
      };

      const removeButton = document.createElement("button");
      removeButton.textContent = "UsuÅ„";
      removeButton.className = "expense-button";
      removeButton.onclick = () => {
        dataArray.splice(index, 1);
        renderAll();
      };

      div.appendChild(nameInput);
      div.appendChild(amountInput);
      div.appendChild(removeButton);

      container.appendChild(div);
    }

    function renderIncomes() {
      const container = document.getElementById("incomeList");
      container.innerHTML = "";
      incomes.forEach((_, i) => createInputRow(container, incomes, i, "income"));
    }

    function renderFixedExpenses() {
      const container = document.getElementById("fixedExpensesList");
      container.innerHTML = "";
      fixedExpenses.forEach((_, i) => createInputRow(container, fixedExpenses, i, "fixed"));
    }

    function renderSubscriptions() {
      const container = document.getElementById("subscriptionsList");
      container.innerHTML = "";
      subscriptions.forEach((_, i) => createInputRow(container, subscriptions, i, "subs"));
    }

    // ObsÅ‚uga wydatkÃ³w ad hoc

    function categoryChanged() {
      const catSelect = document.getElementById("expenseCategory");
      const subcatSelect = document.getElementById("expenseSubcategory");
      const subcatLabel = document.getElementById("subcategoryLabel");
      const selectedCategory = catSelect.value;

      if (!selectedCategory) {
        subcatSelect.style.display = "none";
        subcatLabel.style.display = "none";
        subcatSelect.innerHTML = '<option value="">-- Wybierz podkategoriÄ™ --</option>';
        return;
      }

      const subs = options[selectedCategory] || [];
      if (subs.length === 1 && subs[0] === "Brak podkategorii") {
        subcatSelect.style.display = "none";
        subcatLabel.style.display = "none";
        subcatSelect.innerHTML = '<option value="">-- Wybierz podkategoriÄ™ --</option>';
        return;
      }

      subcatSelect.style.display = "inline-block";
      subcatLabel.style.display = "block";

      // WyczyÅ›Ä‡ i dodaj nowe opcje
      subcatSelect.innerHTML = '<option value="">-- Wybierz podkategoriÄ™ --</option>';
      subs.forEach(sub => {
        const opt = document.createElement("option");
        opt.value = sub;
        opt.textContent = sub;
        subcatSelect.appendChild(opt);
      });
    }

    function addExpense() {
      const category = document.getElementById("expenseCategory").value;
      const subcategory = document.getElementById("expenseSubcategory").value;
      const descInput = document.getElementById("expenseDesc");
      const amountInput = document.getElementById("expenseAmount");

      if (!category) {
        alert("Wybierz kategoriÄ™.");
        return;
      }
      if (document.getElementById("expenseSubcategory").style.display !== "none" && !subcategory) {
        alert("Wybierz podkategoriÄ™.");
        return;
      }
      let amount = parseFloat(amountInput.value);
      if (isNaN(amount) || amount <= 0) {
        alert("Podaj poprawnÄ… kwotÄ™.");
        return;
      }

      // Opis jest opcjonalny
      let desc = descInput.value.trim();
      let fullDesc = "";

      if (desc) {
        fullDesc = subcategory && subcategory !== '' ? `${category} > ${subcategory}: ${desc}` : `${category}: ${desc}`;
      } else {
        fullDesc = subcategory && subcategory !== '' ? `${category} > ${subcategory}` : `${category}`;
      }

      adHocExpenses.push({
        category,
        subcategory,
        name: fullDesc,
        amount
      });

      // Reset formularza
      document.getElementById("expenseCategory").value = "";
      categoryChanged(); // ukrywa/zeruje podkategoriÄ™
      descInput.value = "";
      amountInput.value = "";

      renderExpenses();
      updateSummary();
    }

    function renderExpenses() {
      const list = document.getElementById("expenseList");
      list.innerHTML = "";
      adHocExpenses.forEach((exp, i) => {
        const li = document.createElement("li");
        li.textContent = `${exp.name} â€” ${exp.amount.toFixed(2)} zÅ‚ `;

        const removeBtn = document.createElement("button");
        removeBtn.textContent = "UsuÅ„";
        removeBtn.className = "expense-button";
        removeBtn.onclick = () => {
          adHocExpenses.splice(i, 1);
          renderExpenses();
          updateSummary();
        };
        li.appendChild(removeBtn);

        list.appendChild(li);
      });
    }

    // Dodawanie pozycji do list

    function addIncome() {
      incomes.push({ name: "", amount: 0 });
      renderIncomes();
      updateSummary();
    }

    function addFixedExpense() {
      fixedExpenses.push({ name: "", amount: 0 });
      renderFixedExpenses();
      updateSummary();
    }

    function addSubscription() {
      subscriptions.push({ name: "", amount: 0 });
      renderSubscriptions();
      updateSummary();
    }

    // Podsumowanie

    function updateSummary() {
      const totalIncome = incomes.reduce((acc, val) => acc + val.amount, 0);
      const totalFixed = fixedExpenses.reduce((acc, val) => acc + val.amount, 0);
      const totalSubs = subscriptions.reduce((acc, val) => acc + val.amount, 0);
      const totalAdHoc = adHocExpenses.reduce((acc, val) => acc + val.amount, 0);

      const balance = totalIncome - (totalFixed + totalSubs + totalAdHoc);

      let text = `WpÅ‚ywy: ${totalIncome.toFixed(2)} zÅ‚\n`;
      text += `Wydatki staÅ‚e: ${totalFixed.toFixed(2)} zÅ‚\n`;
      text += `Subskrypcje: ${totalSubs.toFixed(2)} zÅ‚\n`;
      text += `Wydatki ad hoc: ${totalAdHoc.toFixed(2)} zÅ‚\n`;
      text += `---------------------------------\n`;
      text += `Saldo: ${balance.toFixed(2)} zÅ‚\n`;

      document.getElementById("summaryText").textContent = text;
    }

    // Resetowanie danych

    function resetBin() {
      if (confirm("Na pewno chcesz wyczyÅ›ciÄ‡ wszystkie dane?")) {
        incomes = [];
        fixedExpenses = [];
        subscriptions = [];
        adHocExpenses = [];
        renderAll();
        updateSummary();
        alert("Dane zostaÅ‚y wyczyszczone.");
      }
    }

    // Renderowanie wszystkiego

    function renderAll() {
      renderIncomes();
      renderFixedExpenses();
      renderSubscriptions();
      renderExpenses();
    }

    // Zapis danych do jsonbin.io

    async function saveData() {
      const data = {
        incomes,
        fixedExpenses,
        subscriptions,
        adHocExpenses,
      };

      try {
        const response = await fetch(apiUrl, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "X-Master-Key": masterKey,
          },
          body: JSON.stringify(data),
        });
        if (response.ok) {
          alert("Dane zapisane pomyÅ›lnie.");
        } else {
          alert("BÅ‚Ä…d podczas zapisu danych.");
        }
      } catch (error) {
        alert("Nie udaÅ‚o siÄ™ zapisaÄ‡ danych: " + error.message);
      }
    }
	async function loadData() {
  try {
    const response = await fetch(apiUrl + '/latest', {
      headers: {
        "X-Master-Key": masterKey
      }
    });
    if (response.ok) {
      const json = await response.json();
      const data = json.record;

      incomes = data.incomes || [];
      fixedExpenses = data.fixedExpenses || [];
      subscriptions = data.subscriptions || [];
      adHocExpenses = data.adHocExpenses || [];

      renderAll();
      updateSummary();
    } else {
      console.error("BÅ‚Ä…d Å‚adowania danych:", response.statusText);
    }
  } catch (error) {
    console.error("Nie udaÅ‚o siÄ™ zaÅ‚adowaÄ‡ danych:", error);
  }
}

    // Inicjalizacja strony

   window.onload = () => {
  loadData(); // zaÅ‚aduj dane z JSONBin przy starcie
};
  </script>
	<footer> 
	<br><br></br></br>
    <center>&copy; 2025 Copyright by <b>PaweÅ‚ Chrzan</b>,  Wszelkie prawa zastrzeÅ¼one!</center>
  </footer>
</body>
</html>